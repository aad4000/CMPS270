The strategies we used for testing the following functions where: Systematic Testing on Partitioned Input Domain.

#checking.c

Function: int canPlay(int tally[], char *last);

Test Case 1: Last character of <last> is between 'a' and 'z' and tally is filled with all zeros

Input: tally = [0, 0, ..., 0], last = "easy"
Expected Outcome: returns 0

Test Case 2: Last character of <last> is 'a' and tally is filled with all non-negative integers (Edge Case)

Input: tally = [1, 2, ..., 26], last = "a"
Expected Outcome: returns 1

Test Case 3: Last character of <last> is 'z' and tally is filled with all non-negative integers (Edge Case)

Input: tally = [1, 2, ..., 26], last = "z"
Expected Outcome: returns 1

Function: int isLegal(struct Spell *spellMap[], int tally[], char *last, char *played, int round);

Test Case 1: Valid Play

Input: spellMap = an array with valid spell entries.
       tally = an array with non-zero frequencies for all characters.
       last = a string with 'a' as the last character.
       played = a string starting with 'a'.
       round = 1
Expected Outcome: The function should return 1, indicating a successful and legal play.

Test Case 2: Invalid First Letter Mismatch

Input:
      spellMap = an array with valid spell entries.
      tally = an array with non-zero frequencies for all characters.
      last = a string with 'a' as the last character.
      played = a string ending with 'l'. 
      round = 1
Expected Outcome: The function should return -1, indicating an invalid play due to the first letter mismatch.

Test Case 3: Invalid Spell Not in List

Input: spellMap = an array with valid spell entries.
       tally = an array with non-zero frequencies for all characters.
       last = a string with 'b' as the last character.
       played = a string that is not present in spallMap.
       round = 1
Expected Outcome: The function should return -2, indicating an invalid play because the spell is not in the list.

Test Case 4: Invalid Repeat Spell

Input: spellMap = an array with valid spell entries.
       tally = an array with non-zero frequencies for all characters.
       last = a string played in round 1. (ex: "accio")
       played = a string "accio"
       round = 2
Expected Outcome: The function should return -3, indicating an invalid play because the spell was previously used.

#Spellmap.c

Function: void addToMap(struct Spell *spellMap[], struct Spell *node);

Test Case 1: Adding a node starting with letter 'a' to an empty spellMap

Input: spellMap = [NULL, NULL, ..., NULL] and node->first set to 'a'
Expected Outcome: spellMap[0] should be set to node.

Test Case 2: Adding a node starting with letter 'z' to an index with an already existing node in the spellMap

Input: spellMap = [NULL, NULL, NULL, ..., n25] and node->first set to 'z'
Expected Outcome: spellMap[25]->next should be set to node.

Test Case 3: Adding a node starting with letter 'c' to an index with an already existing list of 3 nodes in the spellMap

Input: spellMap = [n1, n2, n3, ..., NULL] and node->first set to 'c'
Expected Outcome: spellMap[2]->next->next->next-> should be set to node.

Function: void readSpells(struct Spell *spellMap[], int tally[], const char *filename);

Test Case 1: Empty spell file.

Setup: Create an empty file named "empty_spells.txt".
Input File Content: The file is empty.
Expected Outcome: spellMap should have all NULL entries, and tally should be an array of zeros.

Test Case 2: File with a single spell.

Setup: Create a file named "single_spell.txt" with one spell.
Input File Content: 1\naccio\n (First line is the count, followed by the spell).
Expected Outcome: spellMap should have one non-NULL entry at index corresponding to 'a', and tally should have 1 at index 0 and 0 for other entries.

Test Case 3: File with multiple spells, including repeating first characters.

Setup: Create a file named "multiple_spells.txt" with multiple spells.
Input File Content: 5\naccio\nalohomora\nexpelliarmus\nlumos\nwingardiumLeviosa\n
Expected Outcome: spellMap should have non-NULL entries at indices corresponding to 'a', 'e', 'l', 'w', and tally should reflect the correct counts for these starting letters.

driver.c:

Test 1: Proper Initialization and Reading from File

Objective: Ensure that spells are correctly read from the file and that the spellMap and tally are properly initialized.
Procedure: Start the game and check if the spells from "spells.txt" are correctly read and printed.
Expected Outcome: The spells listed in "spells.txt" should be displayed correctly, and the tally should reflect the correct counts of spells for each starting letter.

Test 2: Player Input and Turn Alternation

Objective: Test that the game correctly alternates between players and accepts valid spell inputs.
Procedure: Run the game, enter valid spells alternately for both players.
Expected Outcome: The game should alternate turns between players, and each valid spell should be accepted.

Test 3: Input Validation and Error Handling

Objective: Verify that the game handles invalid inputs correctly.
Procedure: During the game, input invalid spells (e.g., not on the list, already used, or not starting with the last letter of the previous spell).
Expected Outcome: The game should reject invalid spells and prompt for a valid spell.

Test 4: Winning Conditions

Objective: Ensure the game correctly identifies the winning conditions.
Procedure: Play the game to a point where a player cannot make a valid move.
Expected Outcome: The game should correctly identify the player who cannot play as the loser.

bot.c:

Function: int playBot(struct Spell * spellMap[], int tally[], char * prev, int difficulty, char * word)

Test Case 1: Difficulty Level 0 (Random Choice)

Setup: Initialize spellMap with several spells, some of which have been used (used = 1), and others not. Initialize tally accordingly.
Input: difficulty = 0, prev points to a valid spell.
Expected Outcome: playBot should return 0, indicating an undetermined outcome. The chosen word should be random among the available options.

Test Case 2: Winning Move Available

Scenario Setup:

Imagine a scenario where the bot has a potential winning move. The player has just played "lumos"(or any other spell ending with 's'), and there are several spells starting with 's' (e.g., "stupify", "sectumsempra", etc.). Among these, "stupify" is a winning move for the bot, as it ends with 'y' and there are no spells starting with 'y' left in the game.
The spellMap and tally should be set up to reflect this situation.
Input:

difficulty = greater than zero .
previousWord =  "lumos".
Expected Outcome: "stupify" should be chosen as the word, and playBot should return 1, indicating a win.



Test Case 3: No Winning Move (Bot Will Lose)

Scenario Setup:
Imagine a scenario where every spell the bot can choose will allow the player to win in the next turn.
For example, the player chooses accio, and the bot has to choose between obliviate and  orchideous but if the bot chooses obliviate, the player can choose episkey and win the game since there are no spells starting with 'y' left in the game or if the bot chooses orchideous, the player can choose stupify and win the game since there are no spells starting with 'y' left in the game word will become any of the two . 
Input: difficulty = greater than 1.
previousWord = "accio".
       
Expected Outcome: playBot should return -1, indicating it cannot avoid losing.

Test Case 4: Bot Blocks Player's Potential Winning Move

Scenario Setup:

The player has just played "rictusempra", a spell ending with 'a'. The bot now has to choose a spell starting with 'a'. The choices include "aparecium" and "avifors". Choosing "avifors" would be disadvantageous as it ends with 's', leading to a limited number of spells for the next turn, like "stupify" which ends with y and there is now words starts with "y" that why he will lose. Choosing "aparecium" would be advantageous as it ends with 'm', leading to a larger number of spells for the next turn, like "muffliato" which ends with 'o' and there are many spells starting with 'o' left in the game.
The spellMap and tally should be set up to reflect this situation.
Input: difficulty = greater than 0.
previousWord = "rictusempra".
Expected Outcome: "aparecium" should be chosen as the word, and playBot should return 0, indicating an undetermined outcome.              

driver2.c:

Test 1: File Reading and Spell Map Initialization

Objective: Ensure the game correctly reads spells from the file and initializes the spell map.
Procedure: Run the game with a known spells file. Verify that the spells are correctly read and stored in spellMap.
Expected Outcome: The game prints the loaded spells correctly.

Test 2: Player and Bot Gameplay Interaction

Objective: Test the game flow between the player and the bot.
Procedure: Run the game and play a few rounds, alternating between the player and the bot. Use different difficulty levels for the bot.
Expected Outcome: The game correctly alternates turns between the player and the bot. The bot's moves should align with its difficulty level.

Test 3: Winning and Losing Conditions

Objective: Verify that the game correctly identifies winning and losing conditions.
Procedure: Play the game to completion. Try scenarios where the player wins, the bot wins, and edge cases (e.g., the first player runs out of moves).
Expected Outcome: The game should correctly identify the winner and loser based on the rules.

Test 4: Input Validation

Objective: Ensure that the game properly validates player inputs.
Procedure: During the player's turn, enter invalid spells (not in the list, already used spells, or spells not starting with the required letter).
Expected Outcome: The game should not accept invalid spells and should prompt the player to re-enter a valid spell.

