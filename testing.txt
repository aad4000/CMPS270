The strategies we used for testing the following functions where: Systematic Testing on Partitioned Input Domain.

#checking.c

Function: int canPlay(int tally[], char *previousWord);

Test Case 1: Last character of <previousWord> is between 'a' and 'z' and tally is filled with all zeros

Input: tally = [0, 0, ..., 0], previousWord = "easy"
Expected Outcome: returns 0

Test Case 2: Last character of <previousWord> is 'a' and tally is filled with all non-negative integers (Edge Case)

Input: tally = [1, 2, ..., 26], previousWord = "a"
Expected Outcome: returns 1

Test Case 3: Last character of <previousWord> is 'z' and tally is filled with all non-negative integers (Edge Case)

Input: tally = [1, 2, ..., 26], last = "z"
Expected Outcome: returns 1

Function: int isLegal(struct Spell *spellMap[], int tally[], char *previousWord, char *currentWord, int round);

Test Case 1: Valid Play

Input: spellMap = an array with valid spell entries.
       tally = an array with non-zero frequencies for all characters.
       previousWord = a string with 'a' as the last character.
       currentWord = a string starting with 'a'.
       round = 1
Expected Outcome: The function should return 1, indicating a successful and legal play.

Test Case 2: Invalid First Letter Mismatch

Input:
      spellMap = an array with valid spell entries.
      tally = an array with non-zero frequencies for all characters.
      previousWord = a string with 'a' as the last character.
      currentWord = a string ending with 'l'. 
      round = 1
Expected Outcome: The function should return -1, indicating an invalid play due to the first letter mismatch.

Test Case 3: Invalid Spell Not in List

Input: spellMap = an array with valid spell entries.
       tally = an array with non-zero frequencies for all characters.
       previousWord = a string with 'b' as the last character.
       currentWord = a string that is not present in spallMap.
       round = 1
Expected Outcome: The function should return -2, indicating an invalid play because the spell is not in the list.

Test Case 4: Invalid Repeat Spell

Input: spellMap = an array with valid spell entries.
       tally = an array with non-zero frequencies for all characters.
       previousWord = a string played in round 1. (ex: "accio")
       currentWord = a string "accio"
       round = 2
Expected Outcome: The function should return -3, indicating an invalid play because the spell was previously used.

#Spellmap.c

Function: void addToMap(struct Spell *spellMap[], struct Spell *node);

Test Case 1: Adding a node starting with letter 'a' to an empty spellMap

Input: spellMap = [NULL, NULL, ..., NULL] and node->first set to 'a'
Expected Outcome: spellMap[0] should be set to node.

Test Case 2: Adding a node starting with letter 'z' to an index with an already existing node in the spellMap

Input: spellMap = [NULL, NULL, NULL, ..., n25] and node->first set to 'z'
Expected Outcome: spellMap[25]->next should be set to node.

Test Case 3: Adding a node starting with letter 'c' to an index with an already existing list of 3 nodes in the spellMap

Input: spellMap = [n1, n2, n3, ..., NULL] and node->first set to 'c'
Expected Outcome: spellMap[2]->next->next->next-> should be set to node.

Function: void readSpells(struct Spell *spellMap[], int tally[], const char *filename);

Test Case 1: Empty spell file.

Setup: Create an empty file named "empty_spells.txt".
Input File Content: The file is empty.
Expected Outcome: spellMap should have all NULL entries, and tally should be an array of zeros.

Test Case 2: File with a single spell.

Setup: Create a file named "single_spell.txt" with one spell.
Input File Content: 1\naccio\n (First line is the count, followed by the spell).
Expected Outcome: spellMap should have one non-NULL entry at index corresponding to 'a', and tally should have 1 at index 0 and 0 for other entries.

Test Case 3: File with multiple spells, including repeating first characters.

Setup: Create a file named "multiple_spells.txt" with multiple spells.
Input File Content: 5\naccio\nalohomora\nexpelliarmus\nlumos\nwingardiumLeviosa\n
Expected Outcome: spellMap should have non-NULL entries at indices corresponding to 'a', 'e', 'l', 'w', and tally should reflect the correct counts for these starting letters.



bot.c:

Function: int playBot(struct Spell * spellMap[], int tally[], char * previousWord, int difficulty, char * currentWord)

Test Case 1: Difficulty Level 0 (Random Choice)

Setup: Initialize spellMap with several spells, some of which have been used (used = 1), and others not. Initialize tally accordingly.
Input: difficulty = 0, prev points to a valid spell.
Expected Outcome: playBot should return 0, indicating an undetermined outcome. The chosen word should be random among the available options.

Test Case 2: Winning Move Available

Scenario Setup:
Suppose there are only two spells left: "lumos" and "stupify". "lumos" ends with 's', but there are no spells starting with 's' left. "stupify" ends with 'y', and there are no spells starting with 'y'.
spellMap and tally reflect this setup.

Input: difficulty > 0 (since it's a clear winning move).
       prev = points to a spell ending with 'l', leading to "lumos".

Expected Outcome: playBot should choose "lumos", as it's a winning move.
                  The function should return 1, indicating the bot will win.

// Assume spellMap and tally are set up for the above scenario.
char prev[] = "spell"; // Last spell ends with 'l'
char word[30]; 
int result = playBot(spellMap, tally, prev, 2, word); // Assuming difficulty 2 for this test
// Check if result == 1 and strcmp(word, "lumos") == 0

Test Case 3: No Winning Move (Bot Will Lose)

Scenario Setup:
Imagine a scenario where every spell the bot can choose will allow the player to win in the next turn. For example, the only spells left are "alohomora" and "reducto". Choosing either leads to a spell starting with 'a' or 'r', both of which are available for the player to win next.
spellMap and tally are set to reflect this setup.

Input: difficulty = higher (e.g., 2 or 3), to ensure the bot looks ahead.
       prev = set to lead to either "alohomora" or "reducto".
       
Expected Outcome: playBot should return -1, indicating it cannot avoid losing.
                  The chosen word will be either "alohomora" or "reducto", but the exact choice depends on the internal logic and may be random.

// Assume spellMap and tally are set up for the above scenario.
char prev[] = "spell"; // Set appropriately to lead to the losing scenario
char word[30]; 
int result = playBot(spellMap, tally, prev, 3, word); // Higher difficulty
// Check if result == -1

Test Case 4: Recursive Depth Search (Higher Difficulty)

Setup: A more complex spell map with multiple layers of choices.
Input: difficulty > 1, set prev to a position that requires looking ahead more than one move.
Expected Outcome: The outcome depends on the setup, but playBot should demonstrate a deeper search, avoiding moves that would lead to a loss in subsequent rounds.


driver2.c:

Test 1: File Reading and Spell Map Initialization

Objective: Ensure the game correctly reads spells from the file and initializes the spell map.
Procedure: Run the game with a known spells file. Verify that the spells are correctly read and stored in spellMap.
Expected Outcome: The game prints the loaded spells correctly.

Test 2: Player and Bot Gameplay Interaction

Objective: Test the game flow between the player and the bot.
Procedure: Run the game and play a few rounds, alternating between the player and the bot. Use different difficulty levels for the bot.
Expected Outcome: The game correctly alternates turns between the player and the bot. The bot's moves should align with its difficulty level.

Test 3: Winning and Losing Conditions

Objective: Verify that the game correctly identifies winning and losing conditions.
Procedure: Play the game to completion. Try scenarios where the player wins, the bot wins, and edge cases (e.g., the first player runs out of moves).
Expected Outcome: The game should correctly identify the winner and loser based on the rules.

Test 4: Input Validation

Objective: Ensure that the game properly validates player inputs.
Procedure: During the player's turn, enter invalid spells (not in the list, already used spells, or spells not starting with the required letter).
Expected Outcome: The game should not accept invalid spells and should prompt the player to re-enter a valid spell.

Test 5: Memory Management and Error Handling

Objective: Check for memory leaks or errors during the game.
Procedure: Run the game with a tool like Valgrind (if on Linux) to check for memory leaks. Also, test with an invalid file name or a malformed spells file.
Expected Outcome: The game should not have memory leaks and should handle file errors gracefully.
