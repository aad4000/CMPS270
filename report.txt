Bot Strategy Report

Introduction:

We have designed our bot to include 4 levels of difficulty; which all differ from each other in the implementation.
The core strategies we used are as follows:

    - Greedy search: The code first tries to find a word that ends in the last letter of the previous word and that has the highest possible tally of unused words. 
                     This is a greedy approach, as it chooses the locally best option at each step without considering the long-term consequences.

    - Minimax search: If the code cannot find a word with a positive tally, it uses minimax search to find the best move possible, even if it means that the bot will lose on the next turn. 
                      This is a more sophisticated approach, as it considers all possible outcomes of the game and chooses the move that leads to the best outcome.

The code also uses a few other intricacies to improve its performance, such as:

    - Sorting the options by tally: This ensures that the code considers the best options first.
    - Avoiding words that have already been used: This prevents the code from choosing a word that the opponent has already played.
    - Checking for immediate losses: The code checks if any of the opponent's possible moves would result in an immediate loss for the bot. If so, the bot avoids playing the word that would lead to that loss.

Here is a more detailed explanation of how the code works:

The function playBot() takes the following arguments:

    - spellMap = An array of all possible words - where all the words are located in index that correspond to the ASCII value of their first character.
    - tally = An array of integers, where each integer represents the number of unused words that end in the corresponding letter.
    - prev = The previous word that was played.
    - difficulty = The difficulty level of the bot.
    - word = A pointer to a string where the bot's next word will be stored.

The function works as follows:

If the difficulty level is 0, the bot chooses a word randomly.

Otherwise, the bot does the following:

    It decrements the tally for the last letter of the previous word.
    It creates an array of options, where each option represents a word that ends in a different letter.
    It iterates over the array of options, skipping any words that have already been used. For each option, it checks if the opponent has any moves that would result in an immediate loss for the bot. If so, it avoids that option.
    If the difficulty level is greater than 1, the bot recursively calls the playBot() function to evaluate each of the remaining options. It does this by playing the current word and then simulating the opponent's response.
    The bot then chooses the option that leads to the best outcome.
    If the bot cannot find a word with a positive tally, it returns -1 to indicate that it has lost. Otherwise, it returns 0.

Testing Our Bot:

After we've proved the correctness of our function (bot) through specifications and systematic testing on the partitioned domain, we wanted to see how
well it would perform against a random bot. In other words, to what extent our bot would outperfom the random bot. These are the results we got:

After 10,000 games (using the spells.txt file)
- Difficulty 3 had a 97.69% win rate
- Difficulty 2 had a 97.38% win rate
- Difficulty 1 had a 89.56% win rate

After 10,000 games (using the randomwords.txt file)
- Difficulty 3 had a 99.85% win rate
- Difficulty 2 had a 99.03% win rate
- Difficulty 1 had a 93.71% win rate

Honestly, the results surpassed our expectations, leaving us more than satisfied with the algorithm we've created!